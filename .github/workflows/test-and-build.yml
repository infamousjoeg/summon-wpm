name: Test and Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.x

      - name: Get dependencies
        run: go mod download

      - name: Run unit tests
        run: go test -v ./...

      - name: Run tests with coverage
        run: |
          go test -race -coverprofile=coverage.txt -covermode=atomic ./...
          go tool cover -func=coverage.txt

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: universal
          - os: windows
            arch: amd64
          - os: windows
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.x

      - name: Get dependencies
        run: go mod download

      - name: Build binary
        run: |
          mkdir -p dist
          
          if [ "${{ matrix.os }}" = "darwin" ] && [ "${{ matrix.arch }}" = "universal" ]; then
            # Build universal macOS binary
            GOARCH=amd64 GOOS=darwin go build -o dist/summon-wpm-amd64 -ldflags "-X main.version=$(grep "version = " cmd/summon-wpm/main.go | cut -d '"' -f2)" ./cmd/summon-wpm
            GOARCH=arm64 GOOS=darwin go build -o dist/summon-wpm-arm64 -ldflags "-X main.version=$(grep "version = " cmd/summon-wpm/main.go | cut -d '"' -f2)" ./cmd/summon-wpm
            lipo -create -output dist/summon-wpm-${{ matrix.os }}-${{ matrix.arch }} dist/summon-wpm-amd64 dist/summon-wpm-arm64
          elif [ "${{ matrix.os }}" = "windows" ]; then
            # Build Windows binary with .exe extension
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o dist/summon-wpm-${{ matrix.os }}-${{ matrix.arch }}.exe -ldflags "-X main.version=$(grep "version = " cmd/summon-wpm/main.go | cut -d '"' -f2)" ./cmd/summon-wpm
          else
            # Build regular binary
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o dist/summon-wpm-${{ matrix.os }}-${{ matrix.arch }} -ldflags "-X main.version=$(grep "version = " cmd/summon-wpm/main.go | cut -d '"' -f2)" ./cmd/summon-wpm
          fi

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: summon-wpm-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/summon-wpm-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }}
          if-no-files-found: error